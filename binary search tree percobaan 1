import 'dart:io';

class STNode<T> {
  T nodeValue;
  STNode<T>? left, right, parent;

  STNode(this.nodeValue, [this.parent]) {
    left = null;
    right = null;
  }

  STNode.withChildren(this.nodeValue, this.left, this.right) {
    parent = null;
  }
}

class BinarySearchTree<T extends Comparable> {
  STNode<T>? root;
  int treeSize = 0;

  BinarySearchTree();

  STNode<T>? getRoot() => root;

  // Inorder traversal (sejajar)
  void inorderIterative(STNode<T>? node) {
    if (node == null) return;
    List<STNode<T>?> stack = [];
    STNode<T>? current = node;
    List<T> result = [];
    while (current != null || stack.isNotEmpty) {
      while (current != null) {
        stack.add(current);
        current = current.left;
      }
      current = stack.removeLast();
      result.add(current!.nodeValue);
      current = current.right;
    }
    stdout.writeln(result.join(' '));
  }

  // Preorder traversal (sejajar)
  void preorderIterative(STNode<T>? node) {
    if (node == null) return;
    List<STNode<T>?> stack = [node];
    List<T> result = [];
    while (stack.isNotEmpty) {
      STNode<T>? current = stack.removeLast();
      result.add(current!.nodeValue);
      if (current.right != null) stack.add(current.right);
      if (current.left != null) stack.add(current.left);
    }
    stdout.writeln(result.join(' '));
  }

  // Postorder traversal (sejajar)
  void postorderIterative(STNode<T>? node) {
    if (node == null) return;
    List<STNode<T>?> stack1 = [node];
    List<STNode<T>?> stack2 = [];
    List<T> result = [];
    while (stack1.isNotEmpty) {
      STNode<T>? current = stack1.removeLast();
      stack2.add(current);
      if (current!.left != null) stack1.add(current.left);
      if (current.right != null) stack1.add(current.right);
    }
    while (stack2.isNotEmpty) {
      result.add(stack2.removeLast()!.nodeValue);
    }
    stdout.writeln(result.join(' '));
  }

  bool add(T item) {
    STNode<T>? t = root, parent;
    int orderValue = 0;
    while (t != null) {
      parent = t;
      orderValue = item.compareTo(t.nodeValue);
      if (orderValue == 0) {
        return false;
      } else if (orderValue < 0) {
        t = t.left;
      } else {
        t = t.right;
      }
    }
    STNode<T> newNode = STNode(item, parent);
    if (parent == null) {
      root = newNode;
    } else if (orderValue < 0) {
      parent.left = newNode;
    } else {
      parent.right = newNode;
    }
    treeSize++;
    return true;
  }

  // Visualisasi pohon
  void printNode<T>(STNode<T>? node, [String prefix = '', bool isTail = true]) {
    if (node != null) {
      stdout.write(prefix);
      stdout.write(isTail ? '╰─► ' : '├─► ');
      stdout.write('[ ');
      stdout.writeln('${node.nodeValue} ]');

      final List<STNode<T>?> children = [];
      if (node.right != null) children.add(node.right);
      if (node.left != null) children.add(node.left);

      for (int i = 0; i < children.length; i++) {
        final child = children[i];
        final isLast = i == children.length - 1;
        printNode(
          child,
          prefix + (isTail ? '    ' : '│   '),
          isLast,
        );
      }
    }
  }
}

void main() {
  BinarySearchTree<int> BSTree = BinarySearchTree();

  BSTree.add(7);
  BSTree.add(4);
  BSTree.add(5);
  BSTree.add(9);
  BSTree.add(11);
  BSTree.add(12);

  print('Visualisasi BST:');
  BSTree.printNode(BSTree.getRoot());

  stdout.write('\ninorder   : ');
  BSTree.inorderIterative(BSTree.getRoot());

  stdout.write('preorder  : ');
  BSTree.preorderIterative(BSTree.getRoot());

  stdout.write('postorder : ');
  BSTree.postorderIterative(BSTree.getRoot());
}
