class Node<T> {
  T key;
  Node<T>? left;
  Node<T>? right;

  Node(this.key);
}

class BinaryTree<T> {
  Node<T>? root;

  // Fungsi untuk menampilkan tree secara in-order
  void inOrderDisplay(Node<T>? node) {
    if (node != null) {
      inOrderDisplay(node.left);   // Kunjungi subtree kiri
      print('${node.key} ');       // Cetak nilai node
      inOrderDisplay(node.right);  // Kunjungi subtree kanan
    }
  }

  // Fungsi untuk menampilkan tree secara pre-order
  void preOrderDisplay(Node<T>? node) {
    if (node != null) {
      print('${node.key} ');       // Cetak nilai node
      preOrderDisplay(node.left);   // Kunjungi subtree kiri
      preOrderDisplay(node.right);  // Kunjungi subtree kanan
    }
  }

  // Fungsi untuk menampilkan tree secara post-order
  void postOrderDisplay(Node<T>? node) {
    if (node != null) {
      postOrderDisplay(node.left);  // Kunjungi subtree kiri
      postOrderDisplay(node.right); // Kunjungi subtree kanan
      print('${node.key} ');        // Cetak nilai node
    }
  }

  // Memulai traversal in-order dari root
  void printInOrderFromRoot() {
    inOrderDisplay(root);
  }

  // Memulai traversal pre-order dari root
  void printPreorderFromRoot() {
    preOrderDisplay(root);
  }

  // Memulai traversal post-order dari root
  void printPostorderFromRoot() {
    postOrderDisplay(root);
  }
}

void main() {
  var t = BinaryTree<int>();
  t.root = Node(10);
  t.root!.left = Node(20);
  t.root!.right = Node(30);
  t.root!.right!.left = Node(4);

  print("In Order traversal of binary tree is: ");
  t.printInOrderFromRoot();  
  print("\nPre Order traversal of binary tree is: ");
  t.printPreorderFromRoot();  
  print("\nPost Order traversal of binary tree is: ");
  t.printPostorderFromRoot();  
}
